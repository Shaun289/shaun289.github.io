{"meta":{"title":"Programming & games","subtitle":"","description":"","author":"Shaun289","url":"http://shaun289.github.io","root":"/"},"pages":[],"posts":[{"title":"Rust: Result 처리","slug":"Rust-Result-처리","date":"2023-02-17T08:23:48.000Z","updated":"2023-02-17T09:02:22.943Z","comments":true,"path":"2023/02/17/Rust-Result-처리/","link":"","permalink":"http://shaun289.github.io/2023/02/17/Rust-Result-%EC%B2%98%EB%A6%AC/","excerpt":"","text":"Rust 사용하면서 필수적인 Result 에 대해 정리하며, Result 처리 하는 방법에 대해 코드를 작성합니다. 주의 : 공부하는 과정에서 정리한 문서이므로 부정확할 수 있으며, 수시로 내용 업데이트합니다. Result 열거형 참고 : Result와 함께하는 복구 가능한 에러 지난 Option 처리 에서 해본Option 열거형은 Some 과 None으로 구성되는데,Result 열거형은 Ok 와 Err 로 구성됩니다. 동일하게 열거형이므로 match, unwrap&#x2F;expect, if let 모두 동일하게 동작합니다.unwrap&#x2F;expect 는 역시 panic을 일으키므로 사용시 주의가 필요합니다. 이 장에서 설명하려는 에러 전파 숏컷 ? 는 아래에서 설명합니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758fn match_result_1(result: Result&lt;i32, bool&gt;) -&gt; bool &#123; match result &#123; Ok(val) =&gt; &#123; if val == 1 &#123; return true; &#125; else &#123; return false; &#125; &#125; Err(b) =&gt; return false, &#125;;&#125;fn unwrap_result_1(result: Result&lt;i32, bool&gt;) -&gt; bool &#123; let val = result.unwrap(); if val == 1 &#123; return true; &#125; else &#123; return false; &#125;&#125;fn if_let_result_1(result: Result&lt;i32, bool&gt;) -&gt; bool &#123; if let Ok(1) = result &#123; return true; &#125; else &#123; return false; &#125;&#125;#[cfg(test)]mod test &#123; use super::*; #[test] fn test_match_result_1() &#123; assert!(match_result_1(Ok(1))); assert!(!match_result_1(Ok(2))); assert!(!match_result_1(Err(true))); assert!(!match_result_1(Err(false))); &#125; #[test] fn test_unwrap_result_1() &#123; assert!(unwrap_result_1(Ok(1))); assert!(!unwrap_result_1(Ok(2))); assert!(!unwrap_result_1(Err(true))); assert!(!unwrap_result_1(Err(false))); &#125; #[test] fn test_if_let_result_1() &#123; assert!(if_let_result_1(Ok(1))); assert!(!if_let_result_1(Ok(2))); assert!(!if_let_result_1(Err(true))); assert!(!if_let_result_1(Err(false))); &#125; &#125; 에러 전파 숏컷 ? 참고 : 에러를 전파하기 위한 숏컷: ? ? 숏컷은 Result 에 대해서만 사용할 수 있습니다. 편리한만큼 명확하게 알지 못하고 건너가면 낭패를 볼 수 있습니다.? 숏컷을 사용할때 Result 의 Err형을 제대로 선언하지 않으면컴파일 에러는 계속 발생하고 어떻게 해결해야할지 모르는 상황이 발생하죠.(제가 그렇습니다.) 123456let f = File::open(&quot;hello.txt&quot;);let mut f = match f &#123; Ok(file) =&gt; file, Err(e) =&gt; return Err(e),&#125;; 1let mut f = File::open(&quot;hello.txt&quot;)?; 위의 두 코드는 동일합니다. match에서 에러일 경우 Err(e) 를 리턴하고 있죠.그래서 ?를 사용할때는 Result 의 Err 타입에 대해서 명확하게 알고 작성해야합니다. 12fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; &#123;&#125; 위의 두 코드 모두 함수 리턴이 io::Error 로 선언해서 전파해야합니다.File::open 의 Result 를 알아야겠네요. 1pub fn open&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Result&lt;File&gt; 참조 : std::io::File::open읭? Result 입니다. 이게 뭐지.. 왜 Result&lt;File, io:Error&gt; 이 아니죠?링크의 Result를 클릭해보니.. 12Type Definition std::io::Resultpub type Result&lt;T&gt; = Result&lt;T, Error&gt;; 그냥 Result가 아니라 std::io::Result 네요..Rust 를 배우는 입장에서 정말 이런거 하나때문에 헤메는거 생각하면 너무 힘드네요.아무튼 하나 더 알게 되었습니다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"rust, result, ok, err","slug":"rust-result-ok-err","permalink":"http://shaun289.github.io/tags/rust-result-ok-err/"}]},{"title":"Rust : Option 처리","slug":"Rust-Option-처리","date":"2023-02-11T08:48:10.000Z","updated":"2023-02-17T07:27:04.869Z","comments":true,"path":"2023/02/11/Rust-Option-처리/","link":"","permalink":"http://shaun289.github.io/2023/02/11/Rust-Option-%EC%B2%98%EB%A6%AC/","excerpt":"","text":"Rust 사용하면서 필수적인 Option 에 대해 정리하며, Option 처리 하는 방법에 대해 코드를 작성합니다. 주의 : 공부하는 과정에서 정리한 문서이므로 부정확할 수 있으며, 수시로 내용 업데이트합니다. Option c, c++ 에서 0, -1, false 를 대체하기 위해 나온 아이디어 자세한 내용은 The Rust Programming Language: Option 열거형과 Null 값 보다 좋은 점들 을 참조 Option 처리하기match 참고 : Option를 이용하는 매칭 match 를 통해 모든 경우의 수를 처리합니다. 1234567891011121314151617181920212223242526fn match_some_1(option: Option&lt;i32&gt;) -&gt; bool &#123; match option &#123; Some(val) =&gt; &#123; if val == 1 &#123; return true; &#125; else &#123; return false; &#125; &#125; None =&gt; return false, &#125;; &#125; #[cfg(test)]mod test &#123; use super::*;#[test] fn test_match_some_1() &#123; assert!(match_some_1(Some(1))); assert!(!match_some_1(Some(2))); assert!(!match_some_1(None)); &#125; &#125; 1인 경우에만 true를 그 외의 경우는 false 를 리턴하도록 합니다.테스트해보니 잘 동작하네요.하지만 매번 저렇게 match를 다 하면 코드가 장황해지겠죠. unwrap과 expect 참고 : 에러가 났을 때 패닉을 위한 숏컷: unwrap과 expect 먼저 unwrap입니다. 말 그대로 Option을 벗겨줍니다. expect 는 어떤 에러인지 사용자 텍스트를 print할 뿐 unwrap과 동일합니다. 문제는 None일 경우에 panic을 일으키고 프로그램을 중단시킵니다.간단한 프로그램에서야 관계없지만 큰 프로젝트에서는 문제가 되죠. 1234567891011121314151617181920fn unwrap_some_1(option: Option&lt;i32&gt;) -&gt; bool &#123; let val = option.unwrap(); if val == 1 &#123; return true; &#125; else &#123; return false; &#125;&#125;#[cfg(test)]mod test &#123; use super::*;#[test] fn test_unwrap_some_1() &#123; assert!(unwrap_some_1(Some(1))); assert!(!unwrap_some_1(Some(2))); assert!(!unwrap_some_1(None)); &#125;&#125; 12345678910111213141516171819202122% cargo test Finished test [unoptimized + debuginfo] target(s) in 0.00s Running unittests src/lib.rs (target/debug/deps/rust_test-1b20918bc1a6980b)running 2 teststest test::test_match_some_1 ... oktest test::test_unwrap_some_1 ... FAILEDfailures:---- test::test_unwrap_some_1 stdout ----thread &#x27;test::test_unwrap_some_1&#x27; panicked at &#x27;called `Option::unwrap()` on a `None` value&#x27;, src/lib.rs:15:22note: run with `RUST_BACKTRACE=1` environment variable to display a backtracefailures: test::test_unwrap_some_1test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00serror: test failed, to rerun pass `--lib` if let 으로 단일 처리하기 참고 : if let을 사용한 간결한 흐름 제어 match는 모든 case 에 대해서 처리해야해서 코드가 단단해지는 장점이 있지만, 코드가 장황해지는 단점또한 있습니다. if let 은 단일 상황에 대해서 간결히 처리할 수 있는 장점이 있습니다. 아래 if_let_some_1 는 위의 match_some_1 와 비교하면 많이 간결해진 것을 확인할 수 있습니다. 123456789101112131415161718fn if_let_some_1(option: Option&lt;i32&gt;) -&gt; bool &#123; if let Some(1) = option &#123; return true; &#125; else &#123; return false; &#125;&#125;#[cfg(test)]mod test &#123; use super::*;#[test] fn test_if_let_some_1() &#123; assert!(if_let_some_1(Some(1))); assert!(!if_let_some_1(Some(2))); assert!(!if_let_some_1(None)); &#125;&#125;","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"rust, option, some, none","slug":"rust-option-some-none","permalink":"http://shaun289.github.io/tags/rust-option-some-none/"}]},{"title":"Rust Package : clap","slug":"Rust-Package-clap","date":"2023-02-04T02:40:35.000Z","updated":"2023-02-04T03:09:57.858Z","comments":true,"path":"2023/02/04/Rust-Package-clap/","link":"","permalink":"http://shaun289.github.io/2023/02/04/Rust-Package-clap/","excerpt":"","text":"Rust 사용하는데 유용한 패키지를 소개하고 간단한 샘플 프로그램을 작성합니다. clap : Command Line Argument Parser for Rust 단축어로 이름 잘 만들었네요! 이런 센스가 매우 부럽습니다. clap crates.io clap github.com clap 4.1.4 doc.rs 소개 어플리케이션 실행시 옵션을 파싱해주는 패키지입니다. Help, Version 등을 자동으로 만들어주고 옵션을 자동으로 파싱해주기 때문에 굉장히 편리합니다. 샘플 프로그램 작성 clap 추가. feature 로 derive 가 필요합니다. feature 에 대한 자세한 내용은 여기 를 참조 1$ cargo add clap --features derive builder 아무래도 기본적인 parser 보다는 builder 쪽이 더 풍부합니다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"rust, package, clap","slug":"rust-package-clap","permalink":"http://shaun289.github.io/tags/rust-package-clap/"}]},{"title":"주간 운동일지 : Restart","slug":"주간-운동일지-Restart","date":"2023-01-27T23:17:27.000Z","updated":"2023-01-27T23:18:01.827Z","comments":true,"path":"2023/01/28/주간-운동일지-Restart/","link":"","permalink":"http://shaun289.github.io/2023/01/28/%EC%A3%BC%EA%B0%84-%EC%9A%B4%EB%8F%99%EC%9D%BC%EC%A7%80-Restart/","excerpt":"","text":"","categories":[{"name":"Daily&Weekly","slug":"Daily-Weekly","permalink":"http://shaun289.github.io/categories/Daily-Weekly/"}],"tags":[{"name":"운동,WorkOut","slug":"운동-WorkOut","permalink":"http://shaun289.github.io/tags/%EC%9A%B4%EB%8F%99-WorkOut/"}]},{"title":"ctags 에서 사용할 수 있는 ignore 옵션","slug":"ctagsignore-옵션","date":"2023-01-26T04:15:03.000Z","updated":"2023-01-27T23:06:46.121Z","comments":true,"path":"2023/01/26/ctagsignore-옵션/","link":"","permalink":"http://shaun289.github.io/2023/01/26/ctagsignore-%EC%98%B5%EC%85%98/","excerpt":"","text":"큰 프로젝트에서 유용하게 사용하는 ctags ignore 옵션 설명입니다. alias~&#x2F;.bashrc 에 다음과 같이 alias 해놓고 사용합니다.뒤의 c++kinds, fields, extra 는 c++ 에서 유용한 옵션으로 추천받아서 그냥 사용하고 있습니다.명확하게 알려면 몇가지 테스트 해보면 알텐데 귀찮… 1alias ctags=&#x27;/usr/bin/ctags -R --exclude=@.ctagsignore --c++-kinds=+p --fields=+iaS --extra=+q &#x27; -R –recurse딱히 설명이 필요없는…아래 디렉토리까지 모두 검색하는 옵션 --exclude&#x3D;@.ctagsignore.ctagsignore 파일을 읽어들여 패턴에 해당하는 파일은 무시하는 옵션이 옵션이 이 포스팅의 핵심입니다.git 사용자에게 익숙한 .gitignore 문법과 동일하게 사용하면 됩니다. 12**/Unittest**/UnitTest 제 .ctagsignore에 포함된 기본 패턴입니다.","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"ctags, ctagsignore, vim, vi","slug":"ctags-ctagsignore-vim-vi","permalink":"http://shaun289.github.io/tags/ctags-ctagsignore-vim-vi/"}]},{"title":"MacOS 에 GoogleTest 설치하기","slug":"MacOS-에-GoogleTest-설치하기","date":"2023-01-16T23:22:41.000Z","updated":"2023-01-17T03:35:50.164Z","comments":true,"path":"2023/01/17/MacOS-에-GoogleTest-설치하기/","link":"","permalink":"http://shaun289.github.io/2023/01/17/MacOS-%EC%97%90-GoogleTest-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/","excerpt":"","text":"맥OS에 GoogleTest를 설치합니다. cmake 설치gtest는 cmake를 사용하므로 cmake부터 설치 1% brew install cmake 소스 다운로드 및 설치우분투에서는 apt 로 다운받을 수 있었는데 brew에는 없다는군요.github google test tags 에서 최신 릴리즈 버전으로 다운받습니다.2022년 6월 기준 release-1.12.1 macos는 wget 이 기본으로 설치되어있지 않네요.curl 사용하여 다운로드 1234# -O : 같은 이름으로 다운오드# -L : 리다이렉트 허용% curl -OL https://github.com/google/googletest/archive/refs/tags/release-1.12.1.tar.gz% tar xvfz release-1.12.1.tar.gz 컴파일 및 설치install은 &#x2F;usr&#x2F;local에 설치하므로 sudo 권한 1234% cd googletest-release-1.12.1% cmake -O CMakeLists.txt% make% sudo make install 사용법Googletest Primer 참조혹은 C++ 함수형프로그래밍 고차함수 에 간단하게 구현","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"C, C++, GoogleTest, gtest, TDD, Unittest","slug":"C-C-GoogleTest-gtest-TDD-Unittest","permalink":"http://shaun289.github.io/tags/C-C-GoogleTest-gtest-TDD-Unittest/"}]},{"title":"C++ 함수형프로그래밍 고차함수","slug":"C-함수형프로그래밍-고차함수","date":"2023-01-16T10:53:19.000Z","updated":"2023-01-18T10:57:22.996Z","comments":true,"path":"2023/01/16/C-함수형프로그래밍-고차함수/","link":"","permalink":"http://shaun289.github.io/2023/01/16/C-%ED%95%A8%EC%88%98%ED%98%95%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98/","excerpt":"","text":"함수형 프로그래밍의 핵심 개념 중 하나인 고차함수의 c++ std 구현제가 개발하는 플랫폼이 c++11 만 지원해서 c++11 에서 가능한 구현만 기술합니다. filter : std::copy_ifInput iterator 를 받아서 filter를 걸어 return true 에 해당하는 element 만 Output Iterator 로 출력함 map : std::transformc++17 부터 추가된 기능입니다.iterator 로 전달받은 element 모두에게 함수를 실행해줍니다.위에 기술했듯이 c++11을 사용하는 나에겐 언감생심. 쓸수없는 기능이네요.boost 를 통해 사용할 수 있습니다.참고자료 : boost::transform vs std::transform stackoverflow.com fold : std::accumulatec++20 부터 추가된 기능입니다.이것마저… 업무에 적용할 수 있는게 없네요 ㅡ.ㅡ 참조 모던 C++로 배우는 함수형 프로그래밍 읽기 cppreference.com std::copy_if cppreference.com std::transform cppreference.com std::accumulate","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"C++, Functional, 함수형, copy_if","slug":"C-Functional-함수형-copy-if","permalink":"http://shaun289.github.io/tags/C-Functional-%ED%95%A8%EC%88%98%ED%98%95-copy-if/"}]},{"title":"C++ Return value optimization. 리턴값 최적화","slug":"C-Return-value-optimization-리턴값-최적화","date":"2023-01-16T06:39:18.000Z","updated":"2023-01-16T10:37:24.887Z","comments":true,"path":"2023/01/16/C-Return-value-optimization-리턴값-최적화/","link":"","permalink":"http://shaun289.github.io/2023/01/16/C-Return-value-optimization-%EB%A6%AC%ED%84%B4%EA%B0%92-%EC%B5%9C%EC%A0%81%ED%99%94/","excerpt":"","text":"함수에서 객체를 리턴하면 어떻게 될까? 분명 학부때는 머릿속에 잘 정리해놨던 부분인데 연차가 길어지면서 점점 모호해졌고,그래서 가능하면 객체 리턴은 지양해왔습니다.이참에 한번 제대로 정리해놓고자 합니다. 함수 내 객체 소멸함수 내에서 생성한 객체는 함수가 소멸하는 시점에 함께 삭제됩니다.그렇게 삭제될 객체를 리턴한다?리턴해서 복사하는 변수와 삭제될 객체 사이의 애매한 시점으로 인해 문제가 생기지 않을까 하는 불안감이머릿속에서 정리되지 않아서 점점 사용을 피하게 되었습니다. Return Value Optimization물론 이러한 저의 우려와 다르게 이미 이 부분에 대해서 문제없도록컴파일러에서 최적화가 잘 되어있습니다. 실행 결과입니다. 1234% clang++ rvo.cpp% ./a.outconstructorc1=1 returnC1 함수 내의 c1 객체를 리턴해서 받아주는 변수가 있다면?함수내의 c1은 삭제되어야하고 리턴받는 c1은 copy 해야하고이 모호함을 해결할뿐만 아니라 copy 해야하는 부하까지 제거하는 최적화가 잘 되어있네요.위의 코드에서 copy contructor가 호출되지 않는다는 것으로 확인할 수 있습니다. -fno-elide-constructors최적화를 끄는 옵션도 있을거라 찾아보니 있네요. 123456% clang++ -fno-elide-constructors rvo.cpp% ./a.outconstructorcopy constructorcopy constructorc1=1 copy constructor가 호출되는 것을 확인할 수 있습니다. 모든 컴파일러가 그러한가?그럴것 같습니다.대충 찾아봐도 1993 g++ 컴파일러에도 옵션이 있어서 더이상 찾아볼 필요성을 못느꼈습니다. 123456789101112131415161718man pages for g++GNU Tools Last change: 30apr1993... -felide-constructors Use this option to instruct the compiler to be smarter about when it can elide constructors. Without this flag, GNU C++ and cfront both generate effectively the same code for: A foo (); A x (foo ()); // x initialized by `foo ()&#x27;, no ctor called A y = foo (); // call to `foo ()&#x27; heads to temporary, // y is initialized from the temporary. Note the difference! With this flag, GNU C++ initial- izes `y&#x27; directly from the call to foo () without going through a temporary. 출처 : man pages for g++ 30apr1993","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"C++, Optimization, 최적화","slug":"C-Optimization-최적화","permalink":"http://shaun289.github.io/tags/C-Optimization-%EC%B5%9C%EC%A0%81%ED%99%94/"}]},{"title":"주간 운동일지 : 부상","slug":"주간-운동일지-부상","date":"2023-01-14T01:03:37.000Z","updated":"2023-01-14T01:17:59.834Z","comments":true,"path":"2023/01/14/주간-운동일지-부상/","link":"","permalink":"http://shaun289.github.io/2023/01/14/%EC%A3%BC%EA%B0%84-%EC%9A%B4%EB%8F%99%EC%9D%BC%EC%A7%80-%EB%B6%80%EC%83%81/","excerpt":"","text":"부상은 괴롭니다. 아파서 괴롭고 운동 못해서 괴롭고 허리부상 의사 “허리 안좋으신거 잘 알고 계시죠?”의사 “코어가 좋으시네요. 그래서 평소에 괜찮으실것 같네요.”나 “네 허리다치고 열심히 운동했어요”의사 “웃프네요” 지긋지긋한 허리부상. 언제쯤 좋아질지…축구때문이라는거 알지만 축구를 그만두는건 역시 생각할수 없네요.운동으로 잘 버텼는데 조기축구 전에 평소에 잘 풀던 몸을 그날따라 덜풀었더니그냥 바로 빡! 왔습니다. ㅠㅠ어차피 시간이 해결해줄거..조심조심 Hang Power Clean이미지출처 축구에 필요한 허벅지!허리통증에 필요한 코어!가장 나에게 필요한 운동이라는 생각이 빡! 들었습니다만,잘못하면 허리가 바사삭이라는 무서운 조언을 듣고 좌절이네요근데 스내치는 역시 배우지 않고는 하기엔 무섭기도 합니다.","categories":[{"name":"Daily&Weekly","slug":"Daily-Weekly","permalink":"http://shaun289.github.io/categories/Daily-Weekly/"}],"tags":[{"name":"운동,WorkOut,PowerClean","slug":"운동-WorkOut-PowerClean","permalink":"http://shaun289.github.io/tags/%EC%9A%B4%EB%8F%99-WorkOut-PowerClean/"}]},{"title":"Hexo 설치 및 팁모음","slug":"Hexo-설치-및-팁모음","date":"2023-01-12T11:20:22.000Z","updated":"2023-01-12T11:31:20.149Z","comments":true,"path":"2023/01/12/Hexo-설치-및-팁모음/","link":"","permalink":"http://shaun289.github.io/2023/01/12/Hexo-%EC%84%A4%EC%B9%98-%EB%B0%8F-%ED%8C%81%EB%AA%A8%EC%9D%8C/","excerpt":"","text":"github.io 블로그에서 사용하고 있는 Hexo를 설치하고 활용하는 팁 모음입니다. 팁목차(Table of Contents) Front-matter metadata 에 toc: true 추가 사이드바에 Catalog에 목차 표시됨","categories":[{"name":"ETC","slug":"ETC","permalink":"http://shaun289.github.io/categories/ETC/"}],"tags":[{"name":"hexo, hueman, blog","slug":"hexo-hueman-blog","permalink":"http://shaun289.github.io/tags/hexo-hueman-blog/"}]},{"title":"React Native 시작하기","slug":"React-Native-시작하기","date":"2023-01-12T11:05:12.000Z","updated":"2023-01-14T00:22:25.957Z","comments":true,"path":"2023/01/12/React-Native-시작하기/","link":"","permalink":"http://shaun289.github.io/2023/01/12/React-Native-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/","excerpt":"","text":"ReactNative를 맥북m1에 설치하며 거칠게 남기는 로그입니다.계속 업데이트하며 다듬도록 하겠습니다. 참고 링크 [React-Native] 1. M1 Mac에서 React-Native 환경 구축 맥에서 Brew로 자바 설치하기 M1 맥 개발환경 설정 - (4) 안드로이드 스튜디오 설치 설치 Homebrew와 node 는 이미 설치 Watchman 설치 123% brew install watchman% watchman -v2023.01.09.00 react-natice-cli 설치1234567891011% npm install -g react-native-cliadded 82 packages in 5s38 packages are looking for funding run `npm fund` for details% npx react-native --versionreact-native-cli: 2.0.1react-native: n/a - not inside a React Native project directory% react-native --versionreact-native-cli: 2.0.1react-native: n/a - not inside a React Native project directory npx 쓰는것과 아닌것의 차이가 global 설치냐 아니냐 차이인것 같은데 일단 넘어감 xcode 설치 app store에서 설치 cocoapods 설치123% sudo gem install cocoapods% pod --version1.11.3 Rosetta 설정 m1 에서 로제타의 성능과 배터리 사용량이 좋지 않은걸로 아는데React Native 에서 m1으로 컴파일되지 않은 라이브러리가 있었나보다.일단 설치 안하고 진행하다 문제 생기면 되돌아오자 Android 개발환경 설치JDK 설치123456# Rosetta 2 설치% sudo softwareupdate --install-rosetta# adoptopenjdk/openjdk 추가하기% brew tap adoptopenjdk/openjdk# jdk 14 설치% brew install --cask adoptopenjdk14 중간에 문제 생겨서 멈추고 다시 설치함 123456789% brew reinstall --cask adoptopenjdk14% /usr/libexec/java_home -VMatching Java Virtual Machines (1): 14.0.2 (x86_64) &quot;AdoptOpenJDK&quot; - &quot;AdoptOpenJDK 14&quot; /Library/Java/JavaVirtualMachines/adoptopenjdk-14.jdk/Contents/Home/Library/Java/JavaVirtualMachines/adoptopenjdk-14.jdk/Contents/Home% java --versionopenjdk 14.0.2 2020-07-14OpenJDK Runtime Environment AdoptOpenJDK (build 14.0.2+12)OpenJDK 64-Bit Server VM AdoptOpenJDK (build 14.0.2+12, mixed mode, sharing) Andriod Studio Android Studio 홈페이지에서 Mac with Apple chip 다운로드 및 설치","categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"}],"tags":[{"name":"ReactNative, RN, Programming","slug":"ReactNative-RN-Programming","permalink":"http://shaun289.github.io/tags/ReactNative-RN-Programming/"}]},{"title":"Snake Game written in Rust","slug":"Snake-Game-wriiten-in-Rust","date":"2023-01-09T11:02:58.000Z","updated":"2023-01-12T10:50:46.028Z","comments":true,"path":"2023/01/09/Snake-Game-wriiten-in-Rust/","link":"","permalink":"http://shaun289.github.io/2023/01/09/Snake-Game-wriiten-in-Rust/","excerpt":"","text":"SnakeGame Creating a Snake Clone in Rust, with Bevy Bevy Rust 게임 엔진 기반으로 간단한 Snake Game 작성 방법 블로그입니다. Bevy 0.7 기반으로 만들어진 것을 0.9 기반으로 몇가지 Migration 을 진행하였습니다. Github link","categories":[{"name":"Game","slug":"Game","permalink":"http://shaun289.github.io/categories/Game/"}],"tags":[{"name":"Game, SnakeGame","slug":"Game-SnakeGame","permalink":"http://shaun289.github.io/tags/Game-SnakeGame/"}]},{"title":"주간 재테크 일지 : 시작","slug":"주간-재테크-일지-시작","date":"2023-01-09T04:25:32.000Z","updated":"2023-01-12T10:59:48.319Z","comments":true,"path":"2023/01/09/주간-재테크-일지-시작/","link":"","permalink":"http://shaun289.github.io/2023/01/09/%EC%A3%BC%EA%B0%84-%EC%9E%AC%ED%85%8C%ED%81%AC-%EC%9D%BC%EC%A7%80-%EC%8B%9C%EC%9E%91/","excerpt":"","text":"이미지출처 주간 재테크 일지 전혀 근거없는 개인 기록용입니다. 마음을 다잡기 위한 다짐의 성격입니다. 미국 기준 금리 4.25 ~ 4.50% 올해는 높은 수준으로 유지. 내릴 예정없음 여유자금 생기면 적금 혹은 채권 구매 물타기 하지말기 이미 물린 종목 돈이 급하지 않으니 유지","categories":[{"name":"Daily&Weekly","slug":"Daily-Weekly","permalink":"http://shaun289.github.io/categories/Daily-Weekly/"}],"tags":[{"name":"재테크","slug":"재테크","permalink":"http://shaun289.github.io/tags/%EC%9E%AC%ED%85%8C%ED%81%AC/"}]}],"categories":[{"name":"Programming","slug":"Programming","permalink":"http://shaun289.github.io/categories/Programming/"},{"name":"Daily&Weekly","slug":"Daily-Weekly","permalink":"http://shaun289.github.io/categories/Daily-Weekly/"},{"name":"ETC","slug":"ETC","permalink":"http://shaun289.github.io/categories/ETC/"},{"name":"Game","slug":"Game","permalink":"http://shaun289.github.io/categories/Game/"}],"tags":[{"name":"rust, result, ok, err","slug":"rust-result-ok-err","permalink":"http://shaun289.github.io/tags/rust-result-ok-err/"},{"name":"rust, option, some, none","slug":"rust-option-some-none","permalink":"http://shaun289.github.io/tags/rust-option-some-none/"},{"name":"rust, package, clap","slug":"rust-package-clap","permalink":"http://shaun289.github.io/tags/rust-package-clap/"},{"name":"운동,WorkOut","slug":"운동-WorkOut","permalink":"http://shaun289.github.io/tags/%EC%9A%B4%EB%8F%99-WorkOut/"},{"name":"ctags, ctagsignore, vim, vi","slug":"ctags-ctagsignore-vim-vi","permalink":"http://shaun289.github.io/tags/ctags-ctagsignore-vim-vi/"},{"name":"C, C++, GoogleTest, gtest, TDD, Unittest","slug":"C-C-GoogleTest-gtest-TDD-Unittest","permalink":"http://shaun289.github.io/tags/C-C-GoogleTest-gtest-TDD-Unittest/"},{"name":"C++, Functional, 함수형, copy_if","slug":"C-Functional-함수형-copy-if","permalink":"http://shaun289.github.io/tags/C-Functional-%ED%95%A8%EC%88%98%ED%98%95-copy-if/"},{"name":"C++, Optimization, 최적화","slug":"C-Optimization-최적화","permalink":"http://shaun289.github.io/tags/C-Optimization-%EC%B5%9C%EC%A0%81%ED%99%94/"},{"name":"운동,WorkOut,PowerClean","slug":"운동-WorkOut-PowerClean","permalink":"http://shaun289.github.io/tags/%EC%9A%B4%EB%8F%99-WorkOut-PowerClean/"},{"name":"hexo, hueman, blog","slug":"hexo-hueman-blog","permalink":"http://shaun289.github.io/tags/hexo-hueman-blog/"},{"name":"ReactNative, RN, Programming","slug":"ReactNative-RN-Programming","permalink":"http://shaun289.github.io/tags/ReactNative-RN-Programming/"},{"name":"Game, SnakeGame","slug":"Game-SnakeGame","permalink":"http://shaun289.github.io/tags/Game-SnakeGame/"},{"name":"재테크","slug":"재테크","permalink":"http://shaun289.github.io/tags/%EC%9E%AC%ED%85%8C%ED%81%AC/"}]}